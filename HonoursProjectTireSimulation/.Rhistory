data<-read.csv("C:/Users/giana/Desktop/CSVCint/PopTraining.csv")
shapiro.test(data[,2])
var.test(data$Training, data2$Test)
aggregate(Training ~ PopSize, data = data, var)
median(data[,2])
aggregate(Training ~ PopSize, data = data, median)
aggregate(Training ~ PopSize, data = data, mad)
ggplot(data, aes(PopSize, Training)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value")
library(ggplot)
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
ggplot(data, aes(PopSize, Training)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value")
data$PopSize<-as.factor(data$PopSize)
ggplot(data, aes(PopSize, Training)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value")
ggplot(data, aes(PopSize, Training, fill=PopSize)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value")
wilcox.test(data$Training, data2$Test)
kruskal.test(Training ~ PopSize, data = data)
dunn.test(data[,2], g=data[,1], method="bonferroni")
install.packages("dunn.test")
library(dunn.test)
dunn.test(data[,2], g=data[,1], method="bonferroni")
data2<-read.csv("C:/Users/giana/Desktop/CSVCint/PopTest.csv")
data2$PopSize<-as.factor(data2$PopSize)
shapiro.test(data2[,2])
aggregate(Training ~ PopSize, data = data2, var)
aggregate(Test ~ PopSize, data = data2, var)
aggregate(Test ~ PopSize, data = data2, median)
ggplot(data, aes(PopSize, Training, fill=PopSize)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Training)")
ggplot(data2, aes(PopSize, testVirtual(), fill=PopSize)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Test)")
ggplot(data, aes(PopSize, Training, fill=PopSize)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Training)")
ggplot(data2, aes(PopSize, Test, fill=PopSize)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Test)")
kruskal.test(Training ~ PopSize, data = data2)
kruskal.test(Test ~ PopSize, data = data2)
dunn.test(data2[,2], g=data2[,1], method="bonferroni")
shapiro.test(data[,2])
aggregate(Training ~ PopSize, data = data, var)
aggregate(Training ~ PopSize, data = data, median)
aggregate(Training ~ PopSize, data = data, mad)
kruskal.test(Training ~ PopSize, data = data)
dunn.test(data[,2], g=data[,1], method="bonferroni")
shapiro.test(data2[,2])
aggregate(Test ~ PopSize, data = data2, var)
aggregate(Test ~ PopSize, data = data2, median)
aggregate(Test ~ PopSize, data = data2, mad)
kruskal.test(Test ~ PopSize, data = data2)
dunn.test(data2[,2], g=data2[,1], method="bonferroni")
data<-read.csv("C:/Users/giana/Desktop/CSVCint/HiddenTraining.csv")
data2<-read.csv("C:/Users/giana/Desktop/CSVCint/HiddenTest.csv")
data$PopSize<-as.factor(data$Hidden)
data2$PopSize<-as.factor(data2$Hidden)
shapiro.test(data[,2])
shapiro.test(data2[,2])
aggregate(Training ~ Hidden, data = data, var)
aggregate(Test ~ Hidden, data = data2, var)
aggregate(Training ~ Hidden, data = data, median)
aggregate(Test ~ Hidden, data = data2, median)
aggregate(Training ~ Hidden, data = data, mad)
aggregate(Test ~ Hidden, data = data2, mad)
ggplot(data, aes(Hidden, Training, fill=Hidden)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Hidden, Test, fill=Hidden)) + geom_boxplot() + xlab("Population Size") + ylab("Fitness Value (Test)")
data$Hidden<-as.factor(data$Hidden)
data2$Hidden<-as.factor(data2$Hidden)
ggplot(data, aes(Hidden, Training, fill=Hidden)) + geom_boxplot() + xlab("Hidden Layers") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Hidden, Test, fill=Hidden)) + geom_boxplot() + xlab("Hidden Layers") + ylab("Fitness Value (Test)")
kruskal.test(Training ~ Hidden, data = data)
kruskal.test(Test ~ Hidden, data = data2)
dunn.test(data[,2], g=data[,1], method="bonferroni")
# Check for normal distribution
shapiro.test(data[,2])
shapiro.test(data2[,2])
shapiro.test(data[,2])
shapiro.test(data2[,2])
aggregate(Training ~ Hidden, data = data, var)
aggregate(Test ~ Hidden, data = data2, var)
aggregate(Training ~ Hidden, data = data, median)
aggregate(Test ~ Hidden, data = data2, median)
aggregate(Training ~ Hidden, data = data, mad)
aggregate(Test ~ Hidden, data = data2, mad)
kruskal.test(Training ~ Hidden, data = data)
kruskal.test(Test ~ Hidden, data = data2)
dunn.test(data[,2], g=data[,1], method="bonferroni")
data<-read.csv("C:/Users/giana/Desktop/CSVCint/MinGeneTraining.csv")
data2<-read.csv("C:/Users/giana/Desktop/CSVCint/MinGeneTest.csv")
data$Gene<-as.factor(data$Gene)
data2$Gene<-as.factor(data2$Gene)
# Check for normal distribution
shapiro.test(data[,2])
shapiro.test(data2[,2])
aggregate(Training ~ Gene, data = data, var)
aggregate(Test ~ Gene, data = data2, var)
aggregate(Training ~ Gene, data = data, median)
aggregate(Test ~ Gene, data = data2, median)
aggregate(Training ~ Gene, data = data, mad)
aggregate(Test ~ Gene, data = data2, mad)
ggplot(data, aes(Gene, Training, fill=Gene)) + geom_boxplot() + xlab("Min Gene") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Gene, Test, fill=Gene)) + geom_boxplot() + xlab("Min Gene") + ylab("Fitness Value (Test)")
kruskal.test(Training ~ Gene, data = data)
kruskal.test(Test ~ Gene, data = data2)
dunn.test(data[,2], g=data[,1], method="bonferroni")
dunn.test(data2[,2], g=data2[,1], method="bonferroni")
data<-read.csv("C:/Users/giana/Desktop/CSVCint/MaxGeneTraining.csv")
data2<-read.csv("C:/Users/giana/Desktop/CSVCint/MaxGeneTest.csv")
data$Gene<-as.factor(data$Gene)
data2$Gene<-as.factor(data2$Gene)
shapiro.test(data[,2])
shapiro.test(data2[,2])
aggregate(Training ~ Gene, data = data, var)
aggregate(Test ~ Gene, data = data2, var)
aggregate(Training ~ Gene, data = data, median)
aggregate(Test ~ Gene, data = data2, median)
aggregate(Training ~ Gene, data = data, mad)
aggregate(Test ~ Gene, data = data2, mad)
ggplot(data, aes(Gene, Training, fill=Gene)) + geom_boxplot() + xlab("Max Gene") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Gene, Test, fill=Gene)) + geom_boxplot() + xlab("Max Gene") + ylab("Fitness Value (Test)")
kruskal.test(Training ~ Gene, data = data)
kruskal.test(Test ~ Gene, data = data2)
dunn.test(data[,2], g=data[,1], method="bonferroni")
dunn.test(data2[,2], g=data2[,1], method="bonferroni")
data<-read.csv("C:/Users/giana/Desktop/CSVCint/MutrateTraining.csv")
data2<-read.csv("C:/Users/giana/Desktop/CSVCint/MutrateTest.csv")
data$Mutrate<-as.factor(data$Mutrate)
data2$Mutrate<-as.factor(data2$Mutrate)
shapiro.test(data[,2])
shapiro.test(data2[,2])
aggregate(Training ~ Mutrate, data = data, var)
aggregate(Test ~ Mutrate, data = data2, var)
aggregate(Training ~ Mutrate, data = data, median)
aggregate(Test ~ Mutrate, data = data2, median)
aggregate(Training ~ Mutrate, data = data, mad)
aggregate(Test ~ Mutrate, data = data2, mad)
## IF data is normally distributed
ggplot(data, aes(Mutrate, Training, fill=Mutrate)) + geom_boxplot() + xlab("Max Mutrate") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Mutrate, Test, fill=Mutrate)) + geom_boxplot() + xlab("Max Mutrate") + ylab("Fitness Value (Test)")
wilcox.test(data$Training, data2$Test)
## Not normally distributed
kruskal.test(Training ~ Mutrate, data = data)
kruskal.test(Test ~ Mutrate, data = data2)
dunn.test(data[,2], g=data[,1], method="bonferroni")
ggplot(data, aes(Mutrate, Training, fill=Mutrate)) + geom_boxplot() + xlab("Mutrate") + ylab("Fitness Value (Training)")
ggplot(data2, aes(Mutrate, Test, fill=Mutrate)) + geom_boxplot() + xlab("Mutrate") + ylab("Fitness Value (Test)")
filenames<-list.files(path=".", pattern="*.csv")
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
pdf(paste(i,"Graph",sep=""))
print(longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)))
}
library(ggplot2)
library(ggpubr)
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
pdf(paste(i,"Graph",sep=""))
print(longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)))
}
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
pdf(paste(i,"Graph.pdf",sep=""))
print(longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)))
}
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
ggsave(paste(i, "Graph"),plot = longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)))
}
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
ggsave(paste(i, "Graph"),plot = longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)), pdf)
}
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
ggsave(paste(i, "Graph.pdf"),plot = longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)), pdf)
}
setwd("C:/Users/giana/source/repos/HonoursProjectTireSimulation/HonoursProjectTireSimulation")
filenames<-list.files(path=".", pattern="*.csv")
names<-substr(filenames,1,nchar(filenames) - 4)
listOfTables<-list()
for(i in names){
filepath <- file.path(".", paste(i,".csv", sep=""))
currTable<-read.csv(filepath)
colnames(currTable)<-c("Slip","Force")
ordTable<-currTable[order(-currTable$Slip), ,drop=FALSE]
longPlot<-ggplot(data = ordTable, mapping = aes(x=ordTable$Slip, y=ordTable$Force))
ggsave(paste(i, "Graph.pdf", sep=""),plot = longPlot + geom_line() + geom_point() + theme_minimal() +
geom_vline(aes(xintercept = 0)) +
geom_hline(aes(yintercept = 0)), pdf)
}
